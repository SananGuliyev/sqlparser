// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const REAL = 57490
const DOUBLE = 57491
const FLOAT_TYPE = 57492
const DECIMAL = 57493
const NUMERIC = 57494
const TIME = 57495
const TIMESTAMP = 57496
const DATETIME = 57497
const YEAR = 57498
const CHAR = 57499
const VARCHAR = 57500
const BOOL = 57501
const CHARACTER = 57502
const VARBINARY = 57503
const NCHAR = 57504
const TEXT = 57505
const TINYTEXT = 57506
const MEDIUMTEXT = 57507
const LONGTEXT = 57508
const BLOB = 57509
const TINYBLOB = 57510
const MEDIUMBLOB = 57511
const LONGBLOB = 57512
const JSON = 57513
const ENUM = 57514
const GEOMETRY = 57515
const POINT = 57516
const LINESTRING = 57517
const POLYGON = 57518
const GEOMETRYCOLLECTION = 57519
const MULTIPOINT = 57520
const MULTILINESTRING = 57521
const MULTIPOLYGON = 57522
const NULLX = 57523
const AUTO_INCREMENT = 57524
const APPROXNUM = 57525
const SIGNED = 57526
const UNSIGNED = 57527
const ZEROFILL = 57528
const DATABASES = 57529
const SCHEMAS = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const MATCH = 57568
const AGAINST = 57569
const BOOLEAN = 57570
const LANGUAGE = 57571
const WITH = 57572
const QUERY = 57573
const EXPANSION = 57574
const UNUSED = 57575

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	150, 266,
	151, 266,
	-2, 256,
	-1, 240,
	109, 591,
	-2, 587,
	-1, 241,
	109, 592,
	-2, 588,
	-1, 310,
	80, 751,
	-2, 59,
	-1, 311,
	80, 712,
	-2, 60,
	-1, 316,
	80, 696,
	-2, 553,
	-1, 318,
	80, 733,
	-2, 555,
	-1, 579,
	52, 42,
	54, 42,
	-2, 44,
	-1, 712,
	109, 594,
	-2, 590,
	-1, 917,
	5, 29,
	-2, 398,
	-1, 942,
	5, 28,
	-2, 528,
	-1, 1169,
	5, 29,
	-2, 529,
	-1, 1214,
	5, 28,
	-2, 531,
	-1, 1276,
	5, 29,
	-2, 532,
}

const yyPrivate = 57344

const yyLast = 10877

var yyAct = [...]int{
	271, 48, 1267, 858, 650, 1225, 526, 1104, 774, 1076,
	792, 1077, 1003, 814, 838, 573, 775, 245, 1073, 571,
	1175, 219, 852, 813, 945, 525, 3, 1050, 961, 737,
	270, 909, 1006, 994, 810, 589, 891, 747, 214, 824,
	950, 457, 763, 848, 413, 465, 714, 588, 459, 48,
	309, 771, 479, 243, 560, 575, 296, 224, 471, 306,
	241, 744, 228, 301, 540, 53, 304, 1296, 1286, 1294,
	1274, 1292, 859, 1285, 218, 1068, 1163, 417, 1234, 590,
	54, 591, 295, 1098, 215, 216, 217, 875, 969, 1099,
	1100, 968, 77, 438, 970, 805, 187, 679, 232, 187,
	187, 874, 297, 1273, 680, 315, 182, 178, 179, 180,
	806, 807, 1110, 1111, 1112, 454, 985, 831, 746, 1187,
	1115, 1113, 839, 187, 187, 77, 1203, 1152, 879, 187,
	1150, 77, 426, 58, 213, 450, 451, 873, 1293, 1249,
	492, 491, 501, 502, 494, 495, 496, 497, 498, 499,
	500, 493, 1291, 832, 503, 1268, 440, 1027, 442, 60,
	61, 62, 63, 64, 772, 1226, 1232, 793, 795, 1024,
	247, 427, 420, 176, 175, 1026, 176, 649, 1228, 658,
	960, 959, 958, 439, 441, 870, 867, 868, 415, 866,
	423, 1254, 190, 177, 1172, 444, 444, 444, 444, 444,
	1141, 444, 515, 516, 1036, 238, 826, 826, 444, 826,
	925, 903, 884, 686, 877, 880, 181, 494, 495, 496,
	497, 498, 499, 500, 493, 48, 1014, 503, 483, 433,
	811, 503, 683, 300, 979, 414, 187, 886, 187, 493,
	512, 794, 503, 514, 187, 1227, 476, 839, 478, 872,
	468, 187, 1259, 1129, 1012, 77, 77, 77, 77, 77,
	1119, 77, 478, 1233, 1231, 437, 948, 1025, 77, 1023,
	524, 871, 528, 529, 530, 531, 532, 533, 534, 535,
	536, 1114, 539, 541, 541, 541, 541, 541, 541, 541,
	541, 549, 550, 551, 552, 77, 1250, 592, 825, 825,
	1272, 825, 572, 467, 823, 821, 1070, 764, 822, 876,
	1120, 1051, 653, 429, 430, 431, 887, 764, 1013, 932,
	477, 476, 878, 1018, 1015, 1008, 1009, 1016, 1011, 1010,
	1014, 496, 497, 498, 499, 500, 493, 478, 1032, 503,
	1017, 1053, 689, 690, 983, 1262, 1020, 685, 542, 543,
	544, 545, 546, 547, 548, 187, 1278, 1193, 1012, 469,
	828, 922, 187, 187, 187, 829, 721, 586, 77, 234,
	580, 473, 419, 1055, 77, 1059, 921, 1054, 920, 1052,
	719, 720, 718, 684, 1057, 477, 476, 51, 477, 476,
	1192, 174, 1072, 1056, 477, 476, 738, 717, 739, 477,
	476, 998, 478, 997, 986, 478, 1058, 1060, 445, 477,
	476, 478, 1279, 513, 1031, 1260, 478, 444, 704, 706,
	707, 1210, 1013, 705, 1190, 444, 478, 1018, 1015, 1008,
	1009, 1016, 1011, 1010, 1137, 995, 444, 444, 444, 444,
	444, 444, 444, 444, 1017, 421, 422, 900, 901, 902,
	1007, 444, 444, 294, 517, 518, 519, 520, 521, 522,
	523, 22, 1282, 458, 1218, 1265, 946, 1257, 1218, 458,
	665, 1107, 300, 312, 1218, 1219, 458, 77, 1184, 1183,
	1095, 458, 1238, 187, 187, 77, 1106, 187, 980, 691,
	187, 1171, 458, 1237, 187, 971, 77, 77, 77, 77,
	77, 77, 77, 77, 260, 259, 262, 263, 264, 265,
	692, 77, 77, 261, 266, 48, 187, 715, 223, 24,
	710, 1126, 1125, 1122, 1123, 1122, 1121, 915, 458, 528,
	861, 77, 693, 708, 740, 187, 557, 458, 583, 667,
	269, 77, 664, 940, 749, 458, 941, 663, 654, 652,
	647, 756, 759, 435, 751, 599, 598, 765, 301, 301,
	301, 301, 301, 428, 414, 1116, 51, 748, 750, 741,
	742, 55, 75, 572, 776, 796, 799, 24, 582, 584,
	749, 582, 301, 766, 77, 1074, 1167, 557, 946, 712,
	462, 466, 947, 1128, 1124, 761, 1039, 927, 751, 972,
	24, 800, 556, 947, 1213, 314, 804, 484, 924, 915,
	915, 418, 768, 791, 777, 187, 585, 780, 187, 187,
	187, 187, 187, 789, 51, 651, 557, 840, 841, 842,
	187, 798, 797, 187, 557, 803, 802, 187, 687, 915,
	926, 527, 187, 187, 818, 946, 77, 51, 752, 753,
	538, 923, 51, 444, 760, 444, 1197, 716, 833, 77,
	853, 778, 779, 444, 781, 1089, 975, 225, 767, 854,
	769, 770, 492, 491, 501, 502, 494, 495, 496, 497,
	498, 499, 500, 493, 951, 952, 503, 850, 851, 849,
	844, 713, 843, 66, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 856,
	187, 1109, 904, 77, 51, 77, 312, 1074, 910, 187,
	999, 954, 187, 77, 661, 455, 699, 957, 300, 300,
	300, 300, 300, 892, 956, 314, 314, 314, 314, 314,
	893, 314, 786, 300, 783, 784, 782, 787, 314, 715,
	785, 788, 300, 566, 567, 1290, 1160, 229, 230, 1284,
	1035, 834, 835, 836, 837, 905, 888, 472, 1289, 898,
	990, 897, 943, 944, 597, 481, 460, 845, 846, 847,
	436, 470, 912, 982, 1264, 1165, 913, 1263, 461, 1211,
	976, 1198, 712, 917, 918, 919, 863, 942, 660, 570,
	301, 472, 928, 226, 227, 931, 896, 934, 220, 935,
	936, 937, 938, 1243, 895, 221, 55, 899, 1242, 964,
	1200, 955, 947, 963, 474, 965, 1251, 973, 492, 491,
	501, 502, 494, 495, 496, 497, 498, 499, 500, 493,
	966, 1188, 503, 682, 57, 59, 701, 702, 314, 987,
	988, 581, 52, 1, 594, 860, 1002, 77, 444, 869,
	187, 1266, 977, 978, 914, 1224, 1103, 820, 1159, 458,
	812, 412, 65, 989, 77, 991, 992, 993, 996, 1258,
	929, 819, 1230, 444, 562, 565, 566, 567, 563, 716,
	564, 568, 711, 1186, 951, 952, 827, 984, 527, 830,
	1019, 754, 755, 1108, 1005, 492, 491, 501, 502, 494,
	495, 496, 497, 498, 499, 500, 493, 77, 77, 503,
	77, 1029, 1261, 981, 604, 906, 907, 908, 562, 565,
	566, 567, 563, 602, 564, 568, 603, 601, 1044, 606,
	1042, 605, 1079, 77, 48, 187, 600, 187, 187, 1075,
	1062, 1061, 199, 1049, 307, 187, 1048, 314, 776, 1091,
	1092, 1093, 809, 1085, 776, 314, 1043, 569, 593, 1080,
	300, 855, 1078, 1083, 475, 67, 314, 314, 314, 314,
	314, 314, 314, 314, 1022, 1021, 865, 1030, 1102, 1097,
	667, 314, 314, 678, 312, 885, 1101, 453, 201, 511,
	894, 967, 313, 1094, 77, 77, 1081, 815, 688, 712,
	1069, 695, 464, 1241, 1199, 930, 537, 762, 246, 703,
	258, 481, 1117, 1118, 314, 255, 1084, 257, 256, 694,
	939, 712, 485, 77, 244, 77, 77, 236, 299, 553,
	301, 561, 559, 558, 1096, 1130, 953, 949, 298, 1038,
	1162, 1248, 698, 26, 889, 890, 56, 466, 1132, 1140,
	187, 1135, 231, 1139, 743, 20, 443, 19, 77, 1161,
	18, 21, 17, 1042, 757, 757, 16, 15, 1148, 14,
	757, 77, 187, 30, 13, 1142, 12, 11, 77, 10,
	9, 8, 1144, 7, 1166, 711, 6, 757, 5, 4,
	187, 222, 23, 1153, 1154, 1155, 1174, 2, 1158, 0,
	1180, 0, 1177, 1178, 1179, 973, 1046, 1047, 1182, 916,
	0, 1168, 1169, 1170, 0, 1173, 314, 0, 444, 1063,
	1064, 0, 1066, 1067, 933, 0, 1189, 0, 1191, 314,
	0, 1195, 712, 1196, 0, 0, 0, 0, 0, 0,
	77, 0, 77, 77, 77, 187, 77, 0, 0, 0,
	0, 1202, 77, 0, 0, 0, 0, 0, 1079, 0,
	0, 1215, 0, 302, 0, 0, 0, 0, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 77,
	77, 1223, 1229, 314, 0, 314, 1214, 0, 1078, 1240,
	0, 0, 77, 314, 1209, 1145, 1146, 0, 1147, 184,
	300, 1149, 211, 1151, 1079, 0, 48, 463, 1239, 1220,
	1221, 1222, 815, 1252, 1235, 0, 1236, 314, 0, 0,
	1256, 0, 77, 77, 0, 0, 0, 305, 0, 0,
	0, 1253, 416, 0, 1078, 77, 1244, 1245, 1246, 1247,
	1270, 1143, 0, 185, 0, 0, 185, 212, 77, 1185,
	1275, 0, 446, 447, 448, 449, 0, 452, 1004, 776,
	1280, 0, 0, 0, 456, 0, 0, 0, 235, 77,
	185, 185, 0, 0, 1287, 1288, 185, 0, 0, 0,
	1271, 0, 0, 0, 1295, 1276, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 1281, 0,
	0, 0, 1041, 0, 0, 77, 0, 1086, 1087, 0,
	0, 1088, 0, 0, 1090, 0, 0, 0, 0, 77,
	0, 1156, 458, 0, 1065, 0, 0, 962, 0, 1299,
	1300, 0, 0, 0, 0, 0, 0, 0, 0, 424,
	0, 425, 0, 0, 314, 0, 0, 432, 0, 0,
	0, 0, 1204, 1205, 434, 1206, 1207, 1208, 492, 491,
	501, 502, 494, 495, 496, 497, 498, 499, 500, 493,
	0, 815, 503, 815, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 185, 0, 1000, 314, 0,
	314, 185, 1138, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 24, 25, 49, 27, 28, 501,
	502, 494, 495, 496, 497, 498, 499, 500, 493, 0,
	0, 503, 1164, 44, 314, 1041, 0, 0, 29, 527,
	492, 491, 501, 502, 494, 495, 496, 497, 498, 499,
	500, 493, 0, 0, 503, 0, 314, 39, 555, 0,
	0, 51, 0, 0, 0, 0, 0, 579, 0, 0,
	0, 757, 0, 648, 1082, 962, 0, 757, 0, 0,
	0, 657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1297, 668, 669, 670, 671, 672, 673, 674, 675,
	815, 197, 185, 314, 0, 314, 1105, 676, 677, 185,
	577, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	31, 32, 34, 33, 36, 207, 0, 1004, 815, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1131, 0,
	1201, 37, 38, 45, 0, 0, 46, 47, 35, 0,
	0, 1133, 0, 0, 0, 0, 0, 0, 1136, 0,
	40, 41, 0, 42, 43, 0, 0, 314, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 655, 656, 200, 196,
	659, 0, 0, 662, 0, 0, 0, 0, 0, 0,
	0, 0, 1269, 527, 491, 501, 502, 494, 495, 496,
	497, 498, 499, 500, 493, 198, 0, 503, 202, 681,
	1176, 0, 1176, 1176, 1176, 0, 1181, 0, 0, 0,
	185, 185, 314, 0, 185, 0, 0, 185, 700, 0,
	0, 666, 0, 0, 50, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 314, 314,
	314, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 314, 194, 195, 0, 203, 204, 205, 206,
	210, 0, 185, 0, 0, 209, 208, 0, 0, 0,
	0, 666, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1216, 1217, 0, 0, 0, 0, 0, 862,
	0, 864, 0, 0, 0, 1105, 0, 0, 773, 883,
	0, 0, 0, 0, 0, 0, 0, 0, 1176, 1157,
	0, 0, 235, 0, 0, 0, 0, 235, 235, 0,
	0, 758, 758, 235, 0, 0, 801, 758, 0, 1255,
	0, 0, 0, 0, 0, 0, 0, 235, 235, 235,
	235, 0, 185, 0, 758, 185, 185, 185, 185, 185,
	0, 0, 0, 0, 0, 0, 0, 790, 0, 0,
	185, 0, 757, 0, 577, 1277, 0, 0, 0, 185,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 1283,
	0, 492, 491, 501, 502, 494, 495, 496, 497, 498,
	499, 500, 493, 857, 0, 503, 1045, 0, 0, 0,
	0, 0, 881, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 621, 492, 491, 501, 502,
	494, 495, 496, 497, 498, 499, 500, 493, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 487, 0, 490, 0, 185, 0, 0, 185,
	504, 505, 506, 507, 508, 509, 510, 0, 488, 489,
	486, 492, 491, 501, 502, 494, 495, 496, 497, 498,
	499, 500, 493, 0, 666, 503, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 609, 0, 0, 1001, 0, 492, 491, 501, 502,
	494, 495, 496, 497, 498, 499, 500, 493, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 0, 1028,
	0, 622, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 635, 636, 637, 638, 639, 640, 641, 235,
	642, 643, 644, 645, 646, 623, 624, 625, 626, 607,
	608, 0, 0, 610, 0, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 627, 628, 629, 630, 631,
	632, 633, 634, 0, 0, 0, 0, 185, 492, 491,
	501, 502, 494, 495, 496, 497, 498, 499, 500, 493,
	0, 0, 503, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1037, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 0, 1033, 1034, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 666, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1194, 1134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 666, 0, 0, 185, 0, 0,
	0, 0, 401, 391, 0, 362, 403, 340, 354, 411,
	355, 356, 383, 326, 370, 126, 352, 0, 343, 321,
	349, 322, 341, 364, 94, 367, 339, 393, 373, 108,
	409, 110, 378, 0, 143, 119, 0, 0, 366, 395,
	368, 388, 361, 384, 331, 377, 404, 353, 381, 405,
	0, 0, 577, 76, 0, 816, 817, 0, 0, 0,
	0, 0, 87, 0, 380, 400, 351, 382, 320, 379,
	0, 324, 327, 410, 398, 346, 347, 974, 0, 0,
	0, 0, 0, 0, 365, 369, 385, 359, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 0, 376, 0,
	0, 0, 328, 325, 0, 363, 0, 0, 0, 330,
	0, 345, 386, 0, 319, 389, 396, 360, 188, 399,
	358, 357, 402, 132, 0, 0, 146, 99, 98, 107,
	394, 342, 350, 90, 348, 138, 128, 158, 375, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 0, 323, 0, 144, 160,
	173, 338, 390, 397, 166, 167, 168, 169, 0, 758,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 334, 337, 332, 333, 371, 372,
	406, 407, 408, 387, 329, 0, 335, 336, 0, 392,
	374, 78, 0, 109, 170, 134, 96, 161, 401, 391,
	0, 362, 403, 340, 354, 411, 355, 356, 383, 326,
	370, 126, 352, 0, 343, 321, 349, 322, 341, 364,
	94, 367, 339, 393, 373, 108, 409, 110, 378, 0,
	143, 119, 0, 0, 366, 395, 368, 388, 361, 384,
	331, 377, 404, 353, 381, 405, 0, 0, 0, 76,
	0, 816, 817, 0, 0, 0, 0, 0, 87, 0,
	380, 400, 351, 382, 320, 379, 0, 324, 327, 410,
	398, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	365, 369, 385, 359, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 0, 376, 0, 0, 0, 328, 325,
	0, 363, 0, 0, 0, 330, 0, 345, 386, 0,
	319, 389, 396, 360, 188, 399, 358, 357, 402, 132,
	0, 0, 146, 99, 98, 107, 394, 342, 350, 90,
	348, 138, 128, 158, 375, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 323, 0, 144, 160, 173, 338, 390, 397,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	334, 337, 332, 333, 371, 372, 406, 407, 408, 387,
	329, 0, 335, 336, 0, 392, 374, 78, 0, 109,
	170, 134, 96, 161, 401, 391, 0, 362, 403, 340,
	354, 411, 355, 356, 383, 326, 370, 126, 352, 0,
	343, 321, 349, 322, 341, 364, 94, 367, 339, 393,
	373, 108, 409, 110, 378, 0, 143, 119, 0, 0,
	366, 395, 368, 388, 361, 384, 331, 377, 404, 353,
	381, 405, 51, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 380, 400, 351, 382,
	320, 379, 0, 324, 327, 410, 398, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 365, 369, 385, 359,
	0, 0, 0, 0, 0, 0, 0, 0, 344, 0,
	376, 0, 0, 0, 328, 325, 0, 363, 0, 0,
	0, 330, 0, 345, 386, 0, 319, 389, 396, 360,
	188, 399, 358, 357, 402, 132, 0, 0, 146, 99,
	98, 107, 394, 342, 350, 90, 348, 138, 128, 158,
	375, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 0, 323, 0,
	144, 160, 173, 338, 390, 397, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 334, 337, 332, 333,
	371, 372, 406, 407, 408, 387, 329, 0, 335, 336,
	0, 392, 374, 78, 0, 109, 170, 134, 96, 161,
	401, 391, 0, 362, 403, 340, 354, 411, 355, 356,
	383, 326, 370, 126, 352, 0, 343, 321, 349, 322,
	341, 364, 94, 367, 339, 393, 373, 108, 409, 110,
	378, 0, 143, 119, 0, 0, 366, 395, 368, 388,
	361, 384, 331, 377, 404, 353, 381, 405, 0, 0,
	0, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 380, 400, 351, 382, 320, 379, 0, 324,
	327, 410, 398, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 365, 369, 385, 359, 0, 0, 0, 0,
	0, 0, 1040, 0, 344, 0, 376, 0, 0, 0,
	328, 325, 0, 363, 0, 0, 0, 330, 0, 345,
	386, 0, 319, 389, 396, 360, 188, 399, 358, 357,
	402, 132, 0, 0, 146, 99, 98, 107, 394, 342,
	350, 90, 348, 138, 128, 158, 375, 129, 137, 111,
	150, 133, 157, 189, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 0, 323, 0, 144, 160, 173, 338,
	390, 397, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 334, 337, 332, 333, 371, 372, 406, 407,
	408, 387, 329, 0, 335, 336, 0, 392, 374, 78,
	0, 109, 170, 134, 96, 161, 401, 391, 0, 362,
	403, 340, 354, 411, 355, 356, 383, 326, 370, 126,
	352, 0, 343, 321, 349, 322, 341, 364, 94, 367,
	339, 393, 373, 108, 409, 110, 378, 0, 143, 119,
	0, 0, 366, 395, 368, 388, 361, 384, 331, 377,
	404, 353, 381, 405, 0, 0, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 380, 400,
	351, 382, 320, 379, 0, 324, 327, 410, 398, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 365, 369,
	385, 359, 0, 0, 0, 0, 0, 0, 709, 0,
	344, 0, 376, 0, 0, 0, 328, 325, 0, 363,
	0, 0, 0, 330, 0, 345, 386, 0, 319, 389,
	396, 360, 188, 399, 358, 357, 402, 132, 0, 0,
	146, 99, 98, 107, 394, 342, 350, 90, 348, 138,
	128, 158, 375, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	323, 0, 144, 160, 173, 338, 390, 397, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 334, 337,
	332, 333, 371, 372, 406, 407, 408, 387, 329, 0,
	335, 336, 0, 392, 374, 78, 0, 109, 170, 134,
	96, 161, 401, 391, 0, 362, 403, 340, 354, 411,
	355, 356, 383, 326, 370, 126, 352, 0, 343, 321,
	349, 322, 341, 364, 94, 367, 339, 393, 373, 108,
	409, 110, 378, 0, 143, 119, 0, 0, 366, 395,
	368, 388, 361, 384, 331, 377, 404, 353, 381, 405,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 380, 400, 351, 382, 320, 379,
	0, 324, 327, 410, 398, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 365, 369, 385, 359, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 0, 376, 0,
	0, 0, 328, 325, 0, 363, 0, 0, 0, 330,
	0, 345, 386, 0, 319, 389, 396, 360, 188, 399,
	358, 357, 402, 132, 0, 0, 146, 99, 98, 107,
	394, 342, 350, 90, 348, 138, 128, 158, 375, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 0, 323, 0, 144, 160,
	173, 338, 390, 397, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 334, 337, 332, 333, 371, 372,
	406, 407, 408, 387, 329, 0, 335, 336, 0, 392,
	374, 78, 0, 109, 170, 134, 96, 161, 401, 391,
	0, 362, 403, 340, 354, 411, 355, 356, 383, 326,
	370, 126, 352, 0, 343, 321, 349, 322, 341, 364,
	94, 367, 339, 393, 373, 108, 409, 110, 378, 0,
	143, 119, 0, 0, 366, 395, 368, 388, 361, 384,
	331, 377, 404, 353, 381, 405, 0, 0, 0, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	380, 400, 351, 382, 320, 379, 0, 324, 327, 410,
	398, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	365, 369, 385, 359, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 0, 376, 0, 0, 0, 328, 325,
	0, 363, 0, 0, 0, 330, 0, 345, 386, 0,
	319, 389, 396, 360, 188, 399, 358, 357, 402, 132,
	0, 0, 146, 99, 98, 107, 394, 342, 350, 90,
	348, 138, 128, 158, 375, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 323, 0, 144, 160, 173, 338, 390, 397,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	334, 337, 332, 333, 371, 372, 406, 407, 408, 387,
	329, 0, 335, 336, 0, 392, 374, 78, 0, 109,
	170, 134, 96, 161, 401, 391, 0, 362, 403, 340,
	354, 411, 355, 356, 383, 326, 370, 126, 352, 0,
	343, 321, 349, 322, 341, 364, 94, 367, 339, 393,
	373, 108, 409, 110, 378, 0, 143, 119, 0, 0,
	366, 395, 368, 388, 361, 384, 331, 377, 404, 353,
	381, 405, 0, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 380, 400, 351, 382,
	320, 379, 0, 324, 327, 410, 398, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 365, 369, 385, 359,
	0, 0, 0, 0, 0, 0, 0, 0, 344, 0,
	376, 0, 0, 0, 328, 325, 0, 363, 0, 0,
	0, 330, 0, 345, 386, 0, 319, 389, 396, 360,
	188, 399, 358, 357, 402, 132, 0, 0, 146, 99,
	98, 107, 394, 342, 350, 90, 348, 138, 128, 158,
	375, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 0, 323, 0,
	144, 160, 173, 338, 390, 397, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 334, 337, 332, 333,
	371, 372, 406, 407, 408, 387, 329, 0, 335, 336,
	0, 392, 374, 78, 0, 109, 170, 134, 96, 161,
	401, 391, 0, 362, 403, 340, 354, 411, 355, 356,
	383, 326, 370, 126, 352, 0, 343, 321, 349, 322,
	341, 364, 94, 367, 339, 393, 373, 108, 409, 110,
	378, 0, 143, 119, 0, 0, 366, 395, 368, 388,
	361, 384, 331, 377, 404, 353, 381, 405, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 380, 400, 351, 382, 320, 379, 0, 324,
	327, 410, 398, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 365, 369, 385, 359, 0, 0, 0, 0,
	0, 0, 0, 0, 344, 0, 376, 0, 0, 0,
	328, 325, 0, 363, 0, 0, 0, 330, 0, 345,
	386, 0, 319, 389, 396, 360, 188, 399, 358, 357,
	402, 132, 0, 0, 146, 99, 98, 107, 394, 342,
	350, 90, 348, 138, 128, 158, 375, 129, 137, 111,
	150, 133, 157, 189, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 317, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 0, 323, 0, 144, 160, 173, 338,
	390, 397, 166, 167, 168, 169, 0, 0, 0, 318,
	316, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 334, 337, 332, 333, 371, 372, 406, 407,
	408, 387, 329, 0, 335, 336, 0, 392, 374, 78,
	0, 109, 170, 134, 96, 161, 401, 391, 0, 362,
	403, 340, 354, 411, 355, 356, 383, 326, 370, 126,
	352, 0, 343, 321, 349, 322, 341, 364, 94, 367,
	339, 393, 373, 108, 409, 110, 378, 0, 143, 119,
	0, 0, 366, 395, 368, 388, 361, 384, 331, 377,
	404, 353, 381, 405, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 380, 400,
	351, 382, 320, 379, 0, 324, 327, 410, 398, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 365, 369,
	385, 359, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 0, 376, 0, 0, 0, 328, 325, 0, 363,
	0, 0, 0, 330, 0, 345, 386, 0, 319, 389,
	396, 360, 188, 399, 358, 357, 402, 132, 0, 0,
	146, 99, 98, 107, 394, 342, 350, 90, 348, 138,
	128, 158, 375, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 587, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 317, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	323, 0, 144, 160, 173, 338, 390, 397, 166, 167,
	168, 169, 0, 0, 0, 318, 316, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 334, 337,
	332, 333, 371, 372, 406, 407, 408, 387, 329, 0,
	335, 336, 0, 392, 374, 78, 0, 109, 170, 134,
	96, 161, 401, 391, 0, 362, 403, 340, 354, 411,
	355, 356, 383, 326, 370, 126, 352, 0, 343, 321,
	349, 322, 341, 364, 94, 367, 339, 393, 373, 108,
	409, 110, 378, 0, 143, 119, 0, 0, 366, 395,
	368, 388, 361, 384, 331, 377, 404, 353, 381, 405,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 380, 400, 351, 382, 320, 379,
	0, 324, 327, 410, 398, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 365, 369, 385, 359, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 0, 376, 0,
	0, 0, 328, 325, 0, 363, 0, 0, 0, 330,
	0, 345, 386, 0, 319, 389, 396, 360, 188, 399,
	358, 357, 402, 132, 0, 0, 146, 99, 98, 107,
	394, 342, 350, 90, 348, 138, 128, 158, 375, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 308, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 317, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 0, 323, 0, 144, 160,
	173, 338, 390, 397, 166, 167, 168, 169, 0, 0,
	0, 318, 316, 311, 310, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 334, 337, 332, 333, 371, 372,
	406, 407, 408, 387, 329, 0, 335, 336, 0, 392,
	374, 78, 0, 109, 170, 134, 96, 161, 126, 0,
	0, 745, 0, 242, 0, 0, 0, 94, 0, 239,
	0, 0, 108, 281, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 272, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 240, 260, 259, 262,
	263, 264, 265, 0, 0, 87, 261, 266, 267, 268,
	0, 0, 237, 253, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 233, 0, 0,
	0, 292, 0, 252, 0, 0, 248, 249, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 290, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 144, 160, 173, 0, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 282, 291, 288,
	289, 286, 287, 285, 284, 283, 293, 274, 275, 276,
	277, 279, 0, 278, 78, 0, 109, 170, 134, 96,
	161, 126, 0, 0, 0, 0, 242, 0, 0, 0,
	94, 0, 239, 0, 0, 108, 281, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 458, 240,
	260, 259, 262, 263, 264, 265, 0, 0, 87, 261,
	266, 267, 268, 0, 0, 237, 253, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 251,
	0, 0, 0, 0, 292, 0, 252, 0, 0, 248,
	249, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 290, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 0, 0, 144, 160, 173, 0, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	282, 291, 288, 289, 286, 287, 285, 284, 283, 293,
	274, 275, 276, 277, 279, 0, 278, 78, 0, 109,
	170, 134, 96, 161, 126, 0, 0, 0, 0, 242,
	0, 0, 0, 94, 0, 239, 0, 0, 108, 281,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 240, 260, 259, 262, 263, 264, 265, 0,
	0, 87, 261, 266, 267, 268, 0, 0, 237, 253,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 233, 0, 0, 0, 292, 0, 252,
	0, 0, 248, 249, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	290, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 144, 160, 173,
	0, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 282, 291, 288, 289, 286, 287, 285,
	284, 283, 293, 274, 275, 276, 277, 279, 0, 278,
	78, 0, 109, 170, 134, 96, 161, 126, 0, 0,
	0, 0, 242, 0, 0, 0, 94, 0, 239, 0,
	0, 108, 281, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 272, 273, 0, 0, 0, 0, 0, 0,
	808, 0, 51, 0, 0, 240, 260, 259, 262, 263,
	264, 265, 0, 0, 87, 261, 266, 267, 268, 0,
	0, 237, 253, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 251, 0, 0, 0, 0,
	292, 0, 252, 0, 0, 248, 249, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 290, 0, 132, 0, 0, 146, 99,
	98, 107, 0, 0, 0, 90, 0, 138, 128, 158,
	0, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 0, 0, 0,
	144, 160, 173, 0, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 282, 291, 288, 289,
	286, 287, 285, 284, 283, 293, 274, 275, 276, 277,
	279, 24, 278, 78, 0, 109, 170, 134, 96, 161,
	0, 0, 0, 126, 0, 0, 0, 0, 242, 0,
	0, 0, 94, 0, 239, 0, 0, 108, 281, 110,
	0, 0, 143, 119, 0, 0, 0, 0, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 240, 260, 259, 262, 263, 264, 265, 0, 0,
	87, 261, 266, 267, 268, 0, 0, 237, 253, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 251, 0, 0, 0, 0, 292, 0, 252, 0,
	0, 248, 249, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 290,
	0, 132, 0, 0, 146, 99, 98, 107, 0, 0,
	0, 90, 0, 138, 128, 158, 0, 129, 137, 111,
	150, 133, 157, 189, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 0, 0, 0, 144, 160, 173, 0,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 282, 291, 288, 289, 286, 287, 285, 284,
	283, 293, 274, 275, 276, 277, 279, 0, 278, 78,
	0, 109, 170, 134, 96, 161, 126, 0, 0, 0,
	0, 242, 0, 0, 0, 94, 0, 239, 0, 0,
	108, 281, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 240, 260, 259, 262, 263, 264,
	265, 0, 0, 87, 261, 266, 267, 268, 0, 0,
	237, 253, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 0, 0, 0, 0, 292,
	0, 252, 0, 0, 248, 249, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 290, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 144,
	160, 173, 0, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 282, 291, 288, 289, 286,
	287, 285, 284, 283, 293, 274, 275, 276, 277, 279,
	126, 278, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 0, 0, 0, 108, 281, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 272, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 240, 260,
	259, 262, 263, 264, 265, 0, 0, 87, 261, 266,
	267, 268, 0, 0, 0, 253, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 0,
	0, 0, 0, 292, 0, 252, 0, 0, 248, 249,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 290, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 1298, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 144, 160, 173, 0, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 282,
	291, 288, 289, 286, 287, 285, 284, 283, 293, 274,
	275, 276, 277, 279, 126, 278, 78, 0, 109, 170,
	134, 96, 161, 94, 0, 0, 0, 0, 108, 281,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 240, 260, 259, 262, 263, 264, 265, 0,
	0, 87, 261, 266, 267, 268, 0, 0, 0, 253,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 0, 0, 0, 0, 292, 0, 252,
	0, 0, 248, 249, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	290, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 144, 160, 173,
	0, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 282, 291, 288, 289, 286, 287, 285,
	284, 283, 293, 274, 275, 276, 277, 279, 126, 278,
	78, 0, 109, 170, 134, 96, 161, 94, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 492, 491, 501, 502, 494, 495, 496, 497, 498,
	499, 500, 493, 0, 0, 503, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 144, 160, 173, 0, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 109, 170, 134, 96,
	161, 126, 0, 0, 0, 480, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 108, 0, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 482, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 477, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 0, 0, 144, 160, 173, 0, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 78, 0, 109,
	170, 134, 96, 161, 94, 0, 0, 0, 0, 108,
	0, 110, 0, 0, 143, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 73, 0, 68, 0,
	0, 0, 74, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 0, 129,
	137, 111, 150, 133, 157, 70, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 0, 0, 0, 144, 160,
	173, 0, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 109, 170, 134, 96, 161, 126, 0,
	0, 0, 576, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 578, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 144, 160, 173, 0, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 78, 0, 109, 170, 134, 96,
	161, 94, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 144, 160, 173, 0, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 0, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 78, 0,
	109, 170, 134, 96, 161, 94, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 144,
	160, 173, 0, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 0, 0, 0, 108, 0, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 696, 0, 0, 697, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 144, 160, 173, 0, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 78, 0, 109, 170,
	134, 96, 161, 94, 0, 596, 0, 0, 108, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 595, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 144, 160, 173,
	0, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 109, 170, 134, 96, 161, 126, 0, 0,
	0, 576, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 108, 0, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 578, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 132, 0, 0, 146, 99,
	98, 107, 0, 0, 0, 90, 0, 138, 128, 158,
	0, 574, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 0, 0, 0,
	144, 160, 173, 0, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 78, 0, 109, 170, 134, 96, 161,
	94, 0, 0, 0, 0, 108, 0, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 0, 0, 144, 160, 173, 0, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 78, 0, 109,
	170, 134, 96, 161, 94, 0, 0, 0, 0, 108,
	0, 110, 0, 0, 143, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 578, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 0, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 0, 0, 0, 144, 160,
	173, 0, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 78, 0, 109, 170, 134, 96, 161, 94, 0,
	0, 0, 0, 108, 0, 110, 0, 0, 143, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 482,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	0, 0, 144, 160, 173, 0, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 78, 0, 109, 170, 134,
	96, 161, 554, 94, 0, 0, 0, 0, 108, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 144, 160, 173,
	0, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 0, 0, 126, 0,
	78, 0, 109, 170, 134, 96, 161, 94, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 144, 160, 173, 0, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 78, 0, 109, 170, 134, 96,
	161, 94, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 188, 0, 0, 0, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 144, 160, 173, 0, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 78, 0,
	109, 170, 134, 96, 161, 94, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 144,
	160, 173, 0, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 0, 0, 0, 108, 0, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 240, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 144, 160, 173, 0, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 78, 0, 109, 170,
	134, 96, 161, 94, 0, 0, 0, 0, 108, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 144, 160, 173,
	0, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 109, 170, 134, 96, 161,
}

var yyPact = [...]int{
	1418, -1000, -186, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 801, 839, -1000, -1000, -1000, -1000, -1000, -1000,
	640, 7247, 53, 74, -12, 9954, 73, 1479, 10626, 10626,
	-1000, -20, -1000, -1000, -1000, -1000, -1000, -1000, 594, -1000,
	-1000, -1000, -1000, -1000, 791, 799, 661, 783, 718, -1000,
	5416, 50, 8833, 9730, 4717, -1000, 508, 68, 10626, -159,
	10178, 48, 48, 48, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 71, 10626, -1000, 10626, 47, 507,
	47, 47, 47, 10626, -1000, 120, -1000, -1000, -1000, -1000,
	10626, 497, 750, 37, 2749, 2749, 2749, 2749, 2749, -15,
	2749, -97, 674, -1000, -1000, -1000, -1000, 2749, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 421, 757,
	6118, 6118, 801, -1000, 594, -1000, -1000, -1000, 746, -1000,
	-1000, 307, 813, -1000, 7023, 119, -1000, 6118, 1800, 599,
	-1000, -1000, 599, -1000, -1000, 92, -1000, -1000, 6566, 6566,
	6566, 6566, 6566, 6566, 6566, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 599,
	-1000, 5885, 599, 599, 599, 599, 599, 599, 599, 599,
	6118, 599, 599, 599, 599, 599, 599, 599, 599, 599,
	599, 599, 599, 599, 9506, 572, 887, -1000, -1000, -1000,
	777, 7928, 8609, 10626, 527, -1000, 562, 4471, -139, -1000,
	-1000, -1000, 217, 8376, -1000, -1000, -1000, 744, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 501, -1000, 1815, 494, 2749, 56, 573, 493,
	240, 492, 10626, 10626, 2749, 57, 10626, 775, 673, 10626,
	491, 486, -1000, 3979, -1000, 2749, 2749, 2749, 2749, 2749,
	2749, 2749, 2749, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2749, 2749, -1000, -109, -1000, 10626, -1000, -1000, -1000, -1000,
	834, 142, 329, 104, 584, -1000, 318, 791, 421, 718,
	8152, 684, -1000, -1000, 10626, -1000, 6118, 6118, 351, -1000,
	9281, -1000, -1000, 3241, 161, 6566, 334, 292, 6566, 6566,
	6566, 6566, 6566, 6566, 6566, 6566, 6566, 6566, 6566, 6566,
	6566, 6566, 6566, 340, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 478, -1000, 594, 447, 447, 126, 126, 126,
	126, 126, 126, 6790, 4950, 421, 490, 250, 5885, 5416,
	5416, 6118, 6118, 10402, 10402, 5416, 780, 231, 250, 10402,
	-1000, 421, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5416,
	5416, 5416, 5416, 22, 10626, -1000, 10402, 8833, 8833, 8833,
	8833, 8833, -1000, 705, 703, -1000, 704, 701, 710, 10626,
	-1000, 482, 7928, 118, 599, -1000, 9057, -1000, -1000, 22,
	524, 8833, 10626, -1000, -1000, 4225, 562, -139, 552, -1000,
	-124, -111, 5649, 125, -1000, -1000, -1000, -1000, 2503, 179,
	293, -85, -1000, -1000, -1000, 605, -1000, 605, 605, 605,
	605, -55, -55, -55, -55, -1000, -1000, -1000, -1000, -1000,
	639, 637, -1000, 605, 605, 605, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 636, 636, 636, 607, 607, 657, -1000, 10626,
	-175, 474, 2749, 773, 2749, -1000, 72, -1000, 10626, -1000,
	-1000, 10626, 2749, -1000, -1000, 103, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 226, -1000,
	-1000, -1000, -1000, 729, 6118, 6118, 3733, 6118, -1000, -1000,
	-1000, 757, -1000, 780, 795, -1000, 738, 736, 5416, -1000,
	-1000, 161, 175, -1000, -1000, 380, -1000, -1000, -1000, -1000,
	102, 599, -1000, 1927, -1000, -1000, -1000, -1000, 334, 6566,
	6566, 6566, 581, 1927, 1835, 1336, 1522, 126, 234, 234,
	137, 137, 137, 137, 137, 122, 122, -1000, -1000, -1000,
	421, -1000, -1000, -1000, 421, 5416, 555, -1000, -1000, 6118,
	-1000, 421, 473, 473, 324, 339, 597, -1000, 101, 586,
	473, 5416, 241, -1000, 6118, 421, -1000, 473, 421, 473,
	473, 513, 599, -1000, 591, -1000, 186, 887, 633, 670,
	843, -1000, -1000, -1000, -1000, 693, -1000, 686, -1000, -1000,
	-1000, -1000, -1000, 62, 61, 60, 10178, -1000, 810, 8833,
	580, -1000, -1000, 552, -139, -132, -1000, -1000, -1000, 250,
	-1000, 439, 545, 2257, -1000, -1000, -1000, -1000, -1000, -1000,
	613, 762, 181, 178, 432, -1000, -1000, 754, -1000, 277,
	-87, -1000, -1000, 345, -55, -55, -1000, -1000, 125, 740,
	125, 125, 125, 377, 377, -1000, -1000, -1000, -1000, 344,
	-1000, -1000, -1000, 342, -1000, 669, 10178, 2749, -1000, 3487,
	-1000, -1000, -1000, -1000, -1000, -1000, 302, 198, 147, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15, -1000, 2749, -1000, 3979, 326, 10626, 10626, 722, 250,
	250, 95, -1000, -1000, 10626, -1000, -1000, -1000, -1000, 585,
	-1000, -1000, -1000, 2995, 5416, -1000, 581, 1927, 1755, -1000,
	6566, 6566, -1000, -1000, 473, 5416, 250, -1000, -1000, -1000,
	205, 340, 205, 6566, 6566, 3733, 6566, 6566, -169, 556,
	227, -1000, 6118, 315, -1000, -1000, -1000, -1000, -1000, 666,
	10402, 599, -1000, 7704, 10178, 801, 10402, 6118, 6118, -1000,
	-1000, 6118, 612, -1000, 6118, -1000, -1000, -1000, 599, 599,
	599, 426, -1000, 801, 580, -1000, -1000, -1000, -137, -135,
	-1000, -1000, 2503, -1000, 2503, 10178, -1000, 430, 415, -1000,
	-1000, 660, 54, -1000, -1000, -1000, 510, 125, 125, -1000,
	204, -1000, -1000, -1000, 471, -1000, 469, 540, 467, 10626,
	-1000, -1000, 539, -1000, 173, -1000, -1000, 10178, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10178, 10626, -1000, -1000, -1000, -1000, -1000, 10178, -1000, -1000,
	-1000, 376, 6118, -1000, -1000, -1000, 3733, -1000, 810, 8833,
	-1000, -1000, 91, 421, -1000, 6566, 1927, 1927, -1000, -1000,
	421, 605, 605, -1000, 605, 607, -1000, 605, -32, 605,
	-35, 421, 421, 1277, 1720, -1000, 814, 737, 599, -166,
	-1000, 250, 6118, -1000, 758, 534, 532, -1000, -1000, 5183,
	421, 437, 85, 426, 791, -1000, 250, 250, 250, 10178,
	250, 10178, 10178, 10178, 7480, 10178, 791, -1000, -1000, -1000,
	-1000, 2257, -1000, 424, -1000, 605, -1000, -1000, -80, 832,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -55, 366, -55, 331, -1000, 298, 2749, 3487, 2503,
	-1000, 603, -1000, -1000, -1000, -1000, 765, -1000, 250, 807,
	533, 3487, -1000, 1927, -1000, -1000, 70, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6566, 6566, -1000, 6566,
	6566, 6566, 421, 363, 250, 761, -1000, 599, -1000, -1000,
	571, 10178, 10178, -1000, -1000, 420, -1000, 414, 414, 414,
	118, -1000, -1000, 113, 10178, -1000, 138, -1000, -149, 125,
	-1000, 125, 438, 427, -1000, -1000, -1000, 10178, 599, 804,
	797, -1000, -1000, -1000, 1359, 1359, 1359, 1359, 49, -1000,
	-1000, 817, -1000, 599, -1000, 594, 82, -1000, 10178, -1000,
	-1000, -1000, -1000, -1000, 113, -1000, 411, 172, 357, -1000,
	280, 759, -1000, 756, -1000, -1000, -1000, -1000, -1000, 410,
	13, -1000, 6118, 6118, -1000, -1000, -1000, -1000, 421, 55,
	-178, 10402, 532, 421, 10178, -1000, -1000, -1000, 297, -1000,
	-1000, -1000, 354, -1000, -1000, 573, 408, -1000, 10178, 250,
	526, -1000, 721, -173, -181, 412, -1000, -1000, -1000, -1000,
	-175, -1000, 13, 735, -1000, 717, -1000, -1000, -1000, 8,
	-176, -7, -179, 599, -182, 6342, -1000, 1359, 421, -1000,
	-1000,
}

var yyPgo = [...]int{
	0, 1107, 25, 461, 1102, 1101, 1099, 1098, 1096, 1093,
	1091, 1090, 1089, 1087, 1086, 1084, 1083, 1079, 1077, 1076,
	1072, 1071, 1070, 1067, 1065, 133, 1062, 1056, 1053, 58,
	1052, 62, 1051, 1050, 31, 118, 61, 37, 369, 1049,
	19, 56, 102, 1048, 40, 1047, 1046, 66, 1043, 54,
	1042, 1041, 1173, 1039, 1038, 10, 24, 1037, 1034, 1032,
	1030, 53, 205, 1029, 1028, 1027, 1025, 1020, 1019, 46,
	6, 9, 30, 11, 1018, 170, 17, 1017, 42, 1016,
	1015, 1014, 1013, 80, 1012, 45, 1008, 21, 48, 1006,
	20, 51, 28, 18, 8, 59, 47, 1002, 16, 50,
	35, 1001, 1000, 391, 999, 998, 997, 995, 993, 987,
	132, 372, 986, 985, 984, 975, 105, 60, 540, 408,
	52, 974, 971, 968, 1217, 36, 55, 15, 967, 38,
	1066, 29, 954, 952, 27, 946, 941, 939, 937, 936,
	933, 924, 153, 923, 922, 903, 14, 34, 899, 897,
	43, 22, 896, 893, 882, 33, 44, 881, 39, 879,
	872, 871, 870, 23, 13, 867, 7, 866, 5, 865,
	861, 2, 859, 12, 856, 3, 855, 4, 32, 853,
	852, 0, 41, 851, 845, 64,
}

var yyR1 = [...]int{
	0, 179, 180, 180, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 28, 28, 8, 9, 9, 9,
	183, 183, 47, 47, 91, 91, 10, 10, 10, 10,
	96, 96, 100, 100, 100, 101, 101, 101, 101, 132,
	132, 11, 11, 11, 11, 11, 11, 11, 177, 177,
	176, 175, 175, 174, 174, 173, 16, 160, 161, 161,
	161, 156, 135, 135, 135, 135, 138, 138, 136, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	141, 141, 141, 141, 141, 141, 141, 141, 155, 155,
	142, 142, 150, 150, 151, 151, 151, 148, 148, 149,
	149, 152, 152, 152, 143, 143, 143, 143, 143, 143,
	143, 145, 145, 153, 153, 146, 146, 146, 147, 147,
	154, 154, 154, 154, 154, 144, 144, 157, 157, 169,
	169, 168, 168, 168, 159, 159, 165, 165, 165, 165,
	165, 158, 158, 167, 167, 166, 162, 162, 162, 163,
	163, 163, 164, 164, 164, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 172, 170, 170, 171, 171,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 19, 108, 108, 105, 105, 106, 106,
	107, 107, 107, 109, 109, 109, 133, 133, 133, 20,
	20, 22, 22, 23, 24, 21, 21, 21, 21, 184,
	25, 26, 26, 27, 27, 27, 31, 31, 31, 29,
	29, 30, 30, 36, 36, 35, 35, 37, 37, 37,
	37, 121, 121, 121, 120, 120, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 54, 54, 90, 90, 92,
	92, 43, 43, 43, 43, 44, 44, 45, 45, 46,
	46, 128, 128, 127, 127, 127, 126, 126, 48, 48,
	48, 50, 49, 49, 49, 49, 51, 51, 53, 53,
	52, 52, 52, 55, 55, 55, 55, 56, 56, 38,
	38, 38, 38, 38, 38, 38, 104, 104, 58, 58,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	68, 68, 68, 68, 68, 68, 59, 59, 59, 59,
	59, 59, 59, 34, 34, 69, 69, 69, 75, 70,
	70, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 66, 66, 66, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	65, 65, 65, 65, 65, 65, 65, 65, 185, 185,
	67, 67, 67, 67, 32, 32, 32, 32, 32, 131,
	131, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 79, 79, 33, 33, 77, 77,
	78, 80, 80, 76, 76, 76, 76, 61, 61, 61,
	61, 61, 61, 61, 61, 63, 63, 63, 81, 81,
	82, 82, 83, 83, 84, 84, 85, 86, 86, 86,
	87, 87, 87, 87, 88, 88, 88, 60, 60, 60,
	60, 60, 60, 89, 89, 89, 89, 93, 93, 71,
	71, 73, 73, 72, 74, 94, 94, 98, 95, 95,
	99, 99, 99, 97, 97, 97, 123, 123, 123, 102,
	102, 110, 110, 111, 111, 103, 103, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 113, 113, 113,
	114, 114, 115, 115, 115, 122, 122, 118, 118, 119,
	119, 124, 124, 125, 125, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 181, 182, 129, 130,
	130, 130,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 8, 4, 6, 5, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 1, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 2, 2, 2, 2,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 3, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 3, 4, 3, 6, 4, 2, 4, 2, 2,
	2, 2, 3, 2, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 5, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 7, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int{
	-1000, -179, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -20, -22, -23,
	-24, -21, -3, -4, 6, 7, -28, 9, 10, 30,
	-16, 112, 113, 115, 114, 140, 116, 133, 134, 49,
	152, 153, 155, 156, 25, 135, 138, 139, -181, 8,
	236, 53, -180, 251, -83, 15, -27, 5, -25, -184,
	-25, -25, -25, -25, -25, -160, 53, -115, 121, 70,
	148, 228, 118, 119, 125, -118, 56, -117, 244, 152,
	163, 157, 184, 176, 174, 177, 215, 65, 155, 224,
	136, 172, 168, 166, 27, 189, 249, 167, 131, 130,
	190, 194, 216, 161, 162, 218, 188, 132, 32, 246,
	34, 144, 219, 192, 187, 183, 186, 160, 182, 38,
	196, 195, 197, 214, 179, 169, 18, 222, 139, 142,
	191, 193, 126, 146, 248, 220, 165, 143, 138, 223,
	156, 217, 226, 37, 201, 159, 129, 153, 150, 180,
	145, 170, 171, 185, 158, 181, 154, 147, 140, 225,
	202, 250, 178, 175, 151, 149, 207, 208, 209, 210,
	247, 221, 173, 203, -103, 121, 123, 119, 119, 120,
	121, 228, 118, 119, -52, -124, 56, -117, 121, 148,
	119, 106, 177, 112, 204, 205, 120, 32, 146, -133,
	119, -105, 149, 207, 208, 209, 210, 56, 217, 216,
	211, -52, -124, 154, -129, -129, -129, -129, -2, -87,
	17, 16, -5, -3, -181, 6, 20, 21, -31, 39,
	40, -26, -37, 97, -38, -124, -57, 72, -62, 29,
	56, -117, 23, -61, -58, -76, -74, -75, 106, 107,
	95, 96, 103, 73, 108, -66, -64, -65, -67, 58,
	57, 66, 59, 60, 61, 62, 67, 68, 69, -118,
	-72, -181, 43, 44, 237, 238, 239, 240, 243, 241,
	75, 33, 227, 235, 234, 233, 231, 232, 229, 230,
	124, 228, 101, 236, -103, -40, -41, -42, -43, -54,
	-75, -181, -52, 11, -47, -52, -95, -132, 154, -99,
	217, 216, -119, -97, -118, -116, 215, 177, 214, 117,
	71, 22, 24, 199, 74, 106, 16, 75, 105, 237,
	112, 47, 229, 230, 227, 239, 240, 228, 204, 29,
	10, 25, 134, 21, 99, 114, 78, 79, 137, 23,
	135, 69, 19, 50, 11, 13, 14, 124, 123, 90,
	120, 45, 8, 108, 26, 87, 41, 28, 43, 88,
	17, 231, 232, 31, 243, 141, 101, 48, 35, 72,
	67, 51, 70, 15, 46, 89, 115, 236, 44, 118,
	205, 6, 242, 30, 133, 42, 119, 206, 77, 122,
	68, 5, 125, 9, 49, 52, 233, 234, 235, 33,
	76, 12, -161, -156, 56, 120, -52, 236, -118, -111,
	124, -111, -111, 119, -52, -52, -110, 124, 56, -110,
	-110, -110, -52, 109, -52, 56, 30, 228, 56, 146,
	119, 147, 121, -130, -181, -119, -130, -130, -130, -130,
	150, 151, -130, -106, 212, 51, -130, -182, 55, -88,
	19, 31, -38, -124, -84, -85, -38, -83, -2, -25,
	35, -29, 21, 64, 11, -121, 71, 70, 87, -120,
	22, -118, 58, 109, -38, -59, 90, 72, 88, 89,
	74, 92, 91, 102, 95, 96, 97, 98, 99, 100,
	101, 93, 94, 105, 80, 81, 82, 83, 84, 85,
	86, -104, -181, -75, -181, 110, 111, -62, -62, -62,
	-62, -62, -62, -62, -181, -2, -70, -38, -181, -181,
	-181, -181, -181, -181, -181, -181, -181, -79, -38, -181,
	-185, -181, -185, -185, -185, -185, -185, -185, -185, -181,
	-181, -181, -181, -53, 26, -52, 30, 54, -48, -50,
	-49, -51, 41, 45, 47, 42, 43, 44, 48, -128,
	22, -40, -181, -127, 142, -126, 22, -124, 58, -52,
	-47, -183, 54, 11, 52, 54, -95, 154, -96, -100,
	218, 220, 80, -123, -118, 58, 29, 30, 55, 54,
	-135, -138, -140, -139, -141, -136, -137, 174, 175, 106,
	178, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 30, 136, 170, 171, 172, 173, 190, 191, 192,
	193, 194, 195, 196, 197, 157, 158, 159, 160, 161,
	162, 163, 165, 166, 167, 168, 169, 56, -130, 121,
	-177, 52, 56, 72, 56, -52, -52, -130, 122, -52,
	23, 51, -52, 56, 56, -125, -124, -116, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -108, 206,
	213, -52, 9, 90, 54, 18, 109, 54, -86, 24,
	25, -87, -182, -31, -63, -118, 59, 62, -30, 42,
	-52, -38, -38, -68, 67, 72, 68, 69, -120, 97,
	-125, -119, -116, -62, -69, -72, -75, 63, 90, 88,
	89, 74, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -131, 56, 58,
	56, -61, -61, -118, -36, 21, -35, -37, -182, 54,
	-182, -2, -35, -35, -38, -38, -76, -118, -124, -76,
	-35, -29, -77, -78, 76, -76, -182, -35, -36, -35,
	-35, -91, 142, -52, -94, -98, -76, -41, -42, -42,
	-41, -42, 41, 41, 41, 46, 41, 46, 41, -49,
	-124, -182, -55, 49, 123, 50, -181, -126, -91, 52,
	-40, -52, -99, -96, 54, 219, 221, 222, 51, -38,
	-147, 105, -162, -163, -164, -119, 58, 59, -156, -157,
	-165, 126, 129, 125, -158, 120, 28, -152, 67, 72,
	-148, 202, -142, 53, -142, -142, -142, -142, -146, 177,
	-146, -146, -146, 53, 53, -142, -142, -142, -150, 53,
	-150, -150, -151, 53, -151, -122, 52, -52, -175, 247,
	-176, 56, -130, 23, -130, -112, 117, 114, 115, -172,
	113, 199, 177, 65, 29, 15, 237, 142, 250, 56,
	143, -52, -52, -130, 109, -107, 11, 90, 37, -38,
	-38, -125, -85, -88, -102, 19, 11, 33, 33, -35,
	67, 68, 69, 109, -181, -69, -62, -62, -62, -34,
	137, 71, -182, -182, -35, 54, -38, -182, -182, -182,
	54, 52, 22, 54, 11, 109, 54, 11, -182, -35,
	-80, -78, 78, -38, -182, -182, -182, -182, -182, -60,
	30, 33, -2, -181, -181, -56, 54, 12, 80, -45,
	-44, 51, 52, -46, 51, -44, 41, 41, 120, 120,
	120, -92, -118, -56, -40, -56, -100, -101, 223, 220,
	226, 56, 54, -164, 80, 53, 28, -158, -158, 56,
	56, -143, 29, 67, -149, 203, 59, -146, -146, -147,
	30, -147, -147, -147, -155, 58, -155, 59, 59, 51,
	-118, -130, -174, -173, -119, -129, -178, 148, 127, 128,
	131, 130, 56, 120, 28, 126, 129, 142, 125, -178,
	148, -113, -114, 122, 22, 120, 28, 142, -130, -125,
	-109, 88, 12, -124, -124, 38, 109, -52, -39, 11,
	97, -119, -125, -36, -34, 71, -62, -62, -182, -37,
	-134, 106, 174, 136, 172, 168, 188, 179, 201, 170,
	202, -131, -134, -62, -62, -119, -62, -62, 244, -83,
	79, -38, 77, -93, 51, -94, -71, -73, -72, -181,
	-2, -89, -118, -92, -83, -98, -38, -38, -38, 53,
	-38, -181, -181, -181, -182, 54, -83, -56, 220, 224,
	225, -163, -164, -167, -166, -118, 56, 56, -145, 51,
	58, 59, 60, 67, 227, 66, 55, -147, -147, 56,
	106, 55, 54, 55, 54, 55, 54, -52, 54, 80,
	-129, -118, -129, -118, -52, -129, -118, 58, -38, -56,
	-40, 109, -182, -62, -182, -142, -142, -142, -151, -142,
	162, -142, 162, -182, -182, -182, 54, 19, -182, 54,
	19, -181, -33, 242, -38, 27, -93, 54, -182, -182,
	-182, 54, 109, -182, -87, -90, -118, -90, -90, -90,
	-127, -118, -87, 55, 54, -142, -153, 199, 9, -146,
	58, -146, 59, 59, -130, -173, -164, 53, 26, -81,
	13, -119, -146, 56, -62, -62, -62, -62, -62, -182,
	58, 28, -73, 33, -2, -181, -118, -118, 54, 55,
	-182, -182, -182, -55, -169, -168, 52, 132, 65, -166,
	-154, 126, 28, 125, 227, -147, -147, 55, 55, -90,
	-181, -82, 14, 16, -182, -182, -182, -182, -32, 90,
	247, 9, -71, -2, 109, -118, -168, 56, -159, 80,
	58, -144, 65, 28, 28, 55, -170, -171, 142, -38,
	-70, -182, 245, 48, 248, -94, -182, -118, 59, 58,
	-177, -182, 54, -118, 38, 246, 249, -175, -171, 33,
	38, 144, 247, 145, 248, -181, 249, -62, 141, -182,
	-182,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 512, 0, 279, 279, 279, 279, 279, 279,
	0, 582, 565, 0, 0, 0, 0, -2, 0, 270,
	271, 0, 273, 274, 788, 788, 788, 788, 0, 34,
	35, 786, 1, 3, 520, 0, 0, 283, 286, 281,
	0, 565, 0, 0, 0, 61, 0, 0, 775, 0,
	776, 563, 563, 563, 583, 584, 587, 588, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 0, 0, 566, 0, 561, 0,
	561, 561, 561, 0, 227, 350, 591, 592, 775, 776,
	0, 0, 0, 0, 789, 789, 789, 789, 789, 0,
	789, 258, 246, 248, 249, 250, 251, 789, 267, 268,
	257, 253, 269, 272, 275, 276, 277, 278, 28, 524,
	0, 0, 512, 30, 0, 279, 284, 285, 289, 287,
	288, 280, 0, 297, 301, 0, 359, 0, 364, 366,
	-2, -2, 0, 401, 402, 403, 404, 405, 0, 0,
	0, 0, 0, 0, 0, 428, 429, 430, 431, 497,
	498, 499, 500, 501, 502, 503, 504, 368, 369, 493,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	484, 0, 458, 458, 458, 458, 458, 458, 458, 458,
	0, 0, 0, 0, 0, 0, 308, 310, 311, 312,
	331, 0, 333, 0, 0, 42, 46, 0, 766, 548,
	-2, -2, 0, 0, 589, 590, -2, 695, -2, 595,
	596, 597, 598, 599, 600, 601, 602, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 0, 78, 0, 0, 789, 0, 68, 0,
	0, 0, 0, 0, 789, 0, 0, 0, 0, 0,
	0, 0, 226, 0, 228, 789, 789, 789, 789, 789,
	789, 789, 789, 237, 790, 791, 238, 239, 240, 241,
	789, 789, 243, 0, 259, 0, 252, 29, 787, 23,
	0, 0, 521, 0, 513, 514, 517, 520, 28, 286,
	0, 291, 290, 282, 0, 298, 0, 0, 0, 302,
	0, 304, 305, 0, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 386, 387, 388, 389, 390, 391,
	392, 365, 0, 379, 0, 0, 0, 421, 422, 423,
	424, 425, 426, 0, 293, 28, 0, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 485, 0,
	450, 0, 451, 452, 453, 454, 455, 456, 457, 0,
	293, 0, 0, 44, 0, 349, 0, 0, 0, 0,
	0, 0, 338, 0, 0, 341, 0, 0, 0, 0,
	332, 0, 0, 353, 739, 334, 0, 336, 337, -2,
	0, 0, 0, 40, 41, 0, 47, 766, 49, 50,
	0, 0, 0, 158, 556, 557, 558, 554, 186, 0,
	141, 137, 83, 84, 85, 130, 87, 130, 130, 130,
	130, 155, 155, 155, 155, 113, 114, 115, 116, 117,
	0, 0, 100, 130, 130, 130, 104, 120, 121, 122,
	123, 124, 125, 126, 127, 88, 89, 90, 91, 92,
	93, 94, 132, 132, 132, 134, 134, 585, 63, 0,
	71, 0, 789, 0, 789, 76, 0, 202, 0, 221,
	562, 0, 789, 224, 225, 351, 593, 594, 229, 230,
	231, 232, 233, 234, 235, 236, 242, 245, 260, 254,
	255, 247, 525, 0, 0, 0, 0, 0, 516, 518,
	519, 524, 31, 289, 0, 505, 0, 0, 0, 292,
	26, 360, 361, 363, 380, 0, 382, 384, 303, 299,
	0, 494, -2, 370, 371, 395, 396, 397, 0, 0,
	0, 0, 393, 375, 0, 406, 407, 408, 409, 410,
	411, 412, 413, 414, 415, 416, 417, 420, 469, 470,
	0, 418, 419, 427, 0, 0, 294, 295, 398, 0,
	543, 28, 0, 0, 0, 0, 0, 493, 0, 0,
	0, 0, 491, 488, 0, 0, 459, 0, 0, 0,
	0, 0, 0, 348, 357, 545, 0, 309, 327, 329,
	0, 324, 339, 340, 342, 0, 344, 0, 346, 347,
	313, 314, 315, 0, 0, 0, 0, 335, 357, 0,
	357, 43, 549, 48, 0, 0, 53, 54, 550, 551,
	552, 0, 77, 187, 189, 192, 193, 194, 79, 80,
	0, 0, 0, 0, 0, 181, 182, 144, 142, 0,
	139, 138, 86, 0, 155, 155, 107, 108, 158, 0,
	158, 158, 158, 0, 0, 101, 102, 103, 95, 0,
	96, 97, 98, 0, 99, 0, 0, 789, 65, 0,
	69, 70, 66, 564, 67, 788, 0, 0, 577, 203,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	0, 220, 789, 223, 0, 263, 0, 0, 0, 522,
	523, 0, 515, 24, 0, 559, 560, 506, 507, 306,
	381, 383, 385, 0, 293, 372, 393, 376, 0, 373,
	0, 0, 367, 432, 0, 0, 400, -2, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 512,
	0, 489, 0, 0, 449, 460, 461, 462, 463, 537,
	0, 0, -2, 0, 0, 512, 0, 0, 0, 321,
	328, 0, 0, 322, 0, 323, 343, 345, 0, 0,
	0, 0, 319, 512, 357, 39, 51, 52, 0, 0,
	58, 159, 0, 190, 0, 0, 176, 0, 0, 179,
	180, 151, 0, 143, 82, 140, 0, 158, 158, 109,
	0, 110, 111, 112, 0, 128, 0, 0, 0, 0,
	586, 64, 72, 73, 0, 195, 788, 0, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 788,
	0, 0, 788, 578, 579, 580, 581, 0, 222, 352,
	244, 0, 0, 261, 262, 526, 0, 25, 357, 0,
	300, 495, 0, 0, 374, 0, 394, 377, 433, 296,
	0, 130, 130, 474, 130, 134, 477, 130, 479, 130,
	482, 0, 0, 0, 0, 494, 0, 0, 0, 486,
	448, 492, 0, 32, 0, 537, 527, 539, 541, 0,
	28, 0, 533, 0, 520, 546, 358, 547, 325, 0,
	330, 0, 0, 0, 333, 0, 520, 38, 55, 56,
	57, 188, 191, 0, 183, 130, 177, 178, 153, 0,
	145, 146, 147, 148, 149, 150, 131, 105, 106, 156,
	157, 155, 0, 155, 0, 135, 0, 789, 0, 0,
	196, 0, 197, 199, 200, 201, 0, 264, 265, 508,
	307, 0, 434, 378, 437, 471, 155, 475, 476, 478,
	480, 481, 483, 439, 438, 440, 0, 0, 443, 0,
	0, 0, 0, 0, 490, 0, 33, 0, 542, -2,
	0, 0, 0, 45, 36, 0, 317, 0, 0, 0,
	353, 320, 37, 168, 0, 185, 160, 154, 0, 158,
	129, 158, 0, 0, 62, 74, 75, 0, 0, 510,
	0, 496, 472, 473, 0, 0, 0, 0, 464, 447,
	487, 0, 540, 0, -2, 0, 535, 534, 0, 326,
	354, 355, 356, 316, 167, 169, 0, 174, 0, 184,
	165, 0, 162, 164, 152, 118, 119, 133, 136, 0,
	0, 27, 0, 0, 441, 442, 444, 445, 0, 0,
	0, 0, 530, 28, 0, 318, 170, 171, 0, 175,
	173, 81, 0, 161, 163, 68, 0, 216, 0, 511,
	509, 446, 0, 0, 0, 538, -2, 536, 172, 166,
	71, 215, 0, 0, 465, 0, 468, 198, 217, 0,
	466, 0, 0, 0, 0, 0, 467, 0, 0, 218,
	219,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 251,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:302
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:307
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:308
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:312
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:336
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:344
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:348
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:354
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:361
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:377
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:381
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:388
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:400
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:412
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:422
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:428
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:432
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:436
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:441
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:450
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:455
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:459
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:469
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:473
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:483
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:487
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:493
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:497
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:501
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:507
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:525
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:535
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:540
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:545
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:549
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:553
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:561
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:565
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:570
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:574
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:585
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:601
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:607
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:613
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:620
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:627
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:632
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:636
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:642
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:653
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:669
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:861
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:866
		{
			yyVAL.optVal = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:870
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:875
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:879
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:887
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:891
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:897
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:905
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:914
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:924
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:932
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:937
		{
			yyVAL.optVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:941
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:945
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:949
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:953
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:966
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:970
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:975
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:984
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:988
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:992
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:997
		{
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1001
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1006
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.colKeyOpt = colKey
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1018
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.optVal = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1037
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1041
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1057
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1061
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1072
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1104
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1118
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1133
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1137
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.str = yyDollar[1].str
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1149
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1153
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1173
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1177
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1181
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1185
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1198
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1208
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1213
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1218
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1222
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1241
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1247
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1251
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1257
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1261
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1267
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1273
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1281
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1286
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1294
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1298
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1304
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1313
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1323
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1380
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1390
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &Describe{Table: yyDollar[2].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1440
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1446
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1450
		{
			yyVAL.str = "extended "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1456
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1460
		{
			yyVAL.str = "full "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1466
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1470
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1474
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1480
		{
			yyVAL.showFilter = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1484
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1488
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1494
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = SessionStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1502
		{
			yyVAL.str = GlobalStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1508
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Begin{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Begin{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &Commit{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Rollback{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &OtherRead{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1557
		{
			setAllowComments(yylex, true)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1561
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1567
		{
			yyVAL.bytes2 = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1571
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1577
		{
			yyVAL.str = UnionStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.str = UnionAllStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1585
		{
			yyVAL.str = UnionDistinctStr
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1590
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1594
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = SQLCacheStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1603
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.str = DistinctStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1616
		{
			yyVAL.str = StraightJoinHint
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1621
		{
			yyVAL.selectExprs = nil
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1625
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1631
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1635
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1645
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1649
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1653
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1658
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1678
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1682
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1688
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1692
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1706
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1710
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1720
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1726
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1740
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1753
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1757
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1761
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1765
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1773
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1777
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1779
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1783
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1785
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1788
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1790
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1793
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1797
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1801
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1808
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.str = JoinStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = JoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1822
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1828
		{
			yyVAL.str = StraightJoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = LeftJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = LeftJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1842
		{
			yyVAL.str = RightJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1846
		{
			yyVAL.str = RightJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = NaturalJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1856
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1866
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1870
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1884
		{
			yyVAL.tableName = TableName{Catalog: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1889
		{
			yyVAL.indexHints = nil
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1893
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1897
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1901
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1906
		{
			yyVAL.expr = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1910
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1920
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1924
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1928
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1936
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1940
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1946
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1950
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1960
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1966
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1970
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1974
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1978
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1982
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1986
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1990
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1994
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 378:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1998
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2002
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.str = IsNullStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2012
		{
			yyVAL.str = IsNotNullStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2016
		{
			yyVAL.str = IsTrueStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2020
		{
			yyVAL.str = IsNotTrueStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = IsFalseStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = IsNotFalseStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2034
		{
			yyVAL.str = EqualStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.str = LessThanStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = GreaterThanStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.str = LessEqualStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2050
		{
			yyVAL.str = GreaterEqualStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.str = NotEqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2058
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2063
		{
			yyVAL.expr = nil
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2067
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2087
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2097
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2127
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2131
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2135
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2139
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2143
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2151
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2155
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2167
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2171
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2175
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2183
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2187
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2191
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2199
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2213
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2239
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2243
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2247
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2257
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2261
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2265
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2269
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2273
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2277
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 441:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2281
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 442:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2285
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2289
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 444:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2293
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2297
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 446:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2301
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2323
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2369
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2387
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.str = BooleanModeStr
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2395
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2399
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.str = QueryExpansionStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2409
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2431
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2449
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2453
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2457
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2465
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2469
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = nil
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2483
		{
			yyVAL.str = string("")
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2493
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2503
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2508
		{
			yyVAL.expr = nil
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2522
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2526
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2530
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Catalog: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}, Name: yyDollar[7].colIdent}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2540
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2544
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2548
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2552
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2556
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = &NullVal{}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2588
		{
			yyVAL.exprs = nil
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2592
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = nil
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2606
		{
			yyVAL.orderBy = nil
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2610
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2620
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2626
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2631
		{
			yyVAL.str = AscScr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.str = AscScr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.str = DescScr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2644
		{
			yyVAL.limit = nil
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2652
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2656
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2661
		{
			yyVAL.str = ""
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.str = ForUpdateStr
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2669
		{
			yyVAL.str = ShareModeStr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2695
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2699
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2703
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2714
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2718
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2722
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2727
		{
			yyVAL.updateExprs = nil
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2731
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2741
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2751
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2757
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2763
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2777
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2783
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2799
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2803
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2807
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.bytes = []byte("charset")
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2825
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2829
		{
			yyVAL.expr = &Default{}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2838
		{
			yyVAL.byt = 0
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.byt = 1
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2843
		{
			yyVAL.empty = struct{}{}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{
			yyVAL.empty = struct{}{}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2848
		{
			yyVAL.str = ""
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2850
		{
			yyVAL.str = IgnoreStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2854
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2858
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2860
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2862
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2875
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2877
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2885
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2888
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2895
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2897
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2901
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2905
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2929
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			decNesting(yylex)
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3160
		{
			forceEOF(yylex)
		}
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3165
		{
			forceEOF(yylex)
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			forceEOF(yylex)
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
